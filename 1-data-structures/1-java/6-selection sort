Selection sort is a simple sorting algorithm that works by repeatedly selecting the minimum (or maximum) element from an unsorted portion of the array and moving it to its correct position in the sorted part of the array. It continues this process until the entire array is sorted. Selection sort has a time complexity of O(n^2), which makes it less efficient than more advanced sorting algorithms for larger datasets.

public class SelectionSort {

    public static void main(String[] args) {
        int[] arr = {64, 25, 12, 22, 11};
        selectionSort(arr);
        System.out.println("Sorted Array: " + Arrays.toString(arr));
    }

    public static void selectionSort(int[] arr) {
        int n = arr.length;

        for (int i = 0; i < n - 1; i++) {
            // Find the minimum element in the unsorted part of the array
            int minIndex = i;
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[minIndex]) {
                    minIndex = j;
                }
            }

            // Swap the found minimum element with the first element in the unsorted part
            int temp = arr[minIndex];
            arr[minIndex] = arr[i];
            arr[i] = temp;
        }
    }
}
